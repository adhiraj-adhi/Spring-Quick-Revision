(6.6) APIResponse class:
============================

(I) APIResponse class:
-------------------------
package com.ecom.project.payload;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class APIResponse {
	private String message;
	private boolean status;
}


(II) Now in GlobalExceptionHandler class:
package com.ecom.project.exceptions;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.ecom.project.payload.APIResponse;

@RestControllerAdvice
public class GlobalExceptionHandler {
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<Map<String, String>> methodArgumentNotValidException(MethodArgumentNotValidException e) {
		Map<String, String> response = new HashMap<>();
		
		e.getBindingResult().getAllErrors().forEach(err -> {
			String fieldName = ((FieldError)err).getField();
			String message = err.getDefaultMessage();
			response.put(fieldName, message);
		});
		
		return new ResponseEntity<Map<String,String>>(response, HttpStatus.BAD_REQUEST);
	}
	
	@ExceptionHandler(ResourceNotFoundException.class)
	public ResponseEntity<APIResponse> resourceNotFoundException(ResourceNotFoundException re) {
		APIResponse apiResponse = new APIResponse(re.getMessage(), false);
		return new ResponseEntity<APIResponse>(apiResponse, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler(APIException.class)
	public ResponseEntity<APIResponse> apiException(APIException ae) {
		return new ResponseEntity<APIResponse>(new APIResponse(ae.getMessage(), false), HttpStatus.BAD_REQUEST);
	}
}


(II) Why we are using this class?
    - Our project will grow in future and we have a GlobalExceptionHandler defined where we are sending 
      in a response.
    - Now the thing is if there was a ResourceNotFoundException or an ApiException we were sending in 
      String as the response. It is good but there is no structure that we have added over here and its 
      important that we add some sort of structure and for that we define a response class (APIResponse) 
      and then make use of it inside the GlobalExceptionHandler.
    - This standardizes the response where we are making use of APIResponse and whatever exceptions we 
      add in future we can make use of this class to return a standard structure.
    - In short, the APIResponse class standardizes the structure of responses sent by the application, 
      especially during exceptions. Instead of returning raw strings, it ensures consistent formatting 
      (with a message and status). This improves clarity, makes debugging easier, and ensures a uniform 
      response format for both current and future exceptions in the GlobalExceptionHandler.