(6.2) What is DTO and ModelWrapper:
======================================

(I) Data Transfer Object (DTO):-
-----------------------------------
(i) What is it?
    - A DTO is a simple Java object (usually without any business logic) used to transfer data 
      between layers of an application, such as from the database to the service layer or from 
      the service layer to the controller. It typically contains only getters, setters, and fields.
    - In other words, Spring Boot applications typically have multiple layers (like Controller, Service, 
      Repository, and Database). These layers need to exchange data, and DTOs/Wrappers help make that 
      exchange cleaner, safer, and more efficient.
    - Example:
        public class UserDTO {
            private String name;
            private String email;
            // Getters and setters
        }

(ii) Why do we need it?
    (a) Separation of concerns: Keeps the data representation separate from the business logic or 
      database structure.
    (b) Security: Prevents exposing sensitive information (e.g., passwords or internal IDs).
    (c) Customization: Allows us to send only the required data to the client (e.g., exclude unnecessary 
      fields like createdAt).



---------------------
(II) Model Wrapper:-
---------------------
(i) What is it?
    - A "Model Wrapper" is an object that encapsulates a model (domain/entity class) along with some 
      additional information, such as metadata or status codes.
    - In other words, if we need to include extra information (like pagination or metadata), a Wrapper 
      class is useful.
    - Example use case (a): Imagine we're returning a list of users along with pagination details:
        public class UserResponseWrapper {
            private List<UserDTO> users;
            private int totalPages;
            private long totalItems;
            // Getters and setters
        }
    - Example use case (b): We want to return a list of users along with metadata (like total users).
        public class UserResponseWrapper {
            private List<UserDTO> users;
            private long totalUsers;
            // Getters and setters
        }

        In our Controller, use the wrapper:
        @GetMapping("/users")
        public UserResponseWrapper getAllUsers() {
            List<UserDTO> users = userService.getAllUsers().stream()
                                            .map(this::convertToDTO)
                                            .toList();
            long totalUsers = userService.countUsers();

            UserResponseWrapper wrapper = new UserResponseWrapper();
            wrapper.setUsers(users);
            wrapper.setTotalUsers(totalUsers);
            return wrapper;
        }

        Client receives a response like this:
        {
            "users": [
                { "name": "Alice", "email": "alice@example.com" },
                { "name": "Bob", "email": "bob@example.com" }
            ],
            "totalUsers": 2
        }

    - Basically wrapper is nothing but collection of DTOs along with additional information. We can think
      of it like this:
        (a) DTO: The individual pieces of data (e.g., each user's name and email).
        (b) Wrapper: The package that bundles these individual pieces together and includes extra details 
          (e.g., the total number of users or page number).



(ii) Why do we need it?
    - Organized data structure: Helps bundle extra information with our main data, like metadata or 
      status.
    - Cleaner responses: Makes it easier to handle structured responses in APIs.


--------------------------------------------
(III) With and Without DTOs and Wrappers:-
--------------------------------------------
(i) Without DTOs and Wrappers:
    - Imagine a User entity class that represents a database table:
        @Entity
        public class User {
            private Long id;          // Database ID
            private String name;      // User's name
            private String email;     // User's email
            private String password;  // Sensitive info
            private LocalDate createdAt; // Metadata
            // Getters and setters
        }
    
    - If we send this User object directly to the client through an API, issues arise:
        (a) Sensitive data exposure: The password field will be sent to the client, which is a security risk.
        (b) Unnecessary fields: The client doesn’t need fields like createdAt.
        (c) Tight coupling: If the database structure changes (e.g., a new column is added), our API might 
          break. (But how? -> This is discussed later)



(ii) With DTOs and Wrappers:
    - A DTO ensures we send only the required data to the client.
        public class UserDTO {
            private String name;
            private String email; // No password or createdAt here!
            // Getters and setters
        }
    - In our Service layer, we convert the User entity to UserDTO:
        public UserDTO convertToDTO(User user) {
            UserDTO dto = new UserDTO();
            dto.setName(user.getName());
            dto.setEmail(user.getEmail());
            return dto;
        }

        public UserDTO getUserDTOById(Long id) {
            User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found"));
            return convertToDTO(user); // Conversion logic stays here
        }

    - Now in our Controller layer, we return DTO to the client:
        public UserDTO getUser(@PathVariable Long id) {
            return userService.getUserDTOById(id); // Calls Service layer for the DTO
        }

(iii) Benefits of Using DTOs:
    - Security: The password field is not exposed to the client.
    - Clean data: Only send necessary fields (name and email).
    - Independent layers: Changes in the User entity won’t directly impact the API layer.


------------------------------------------------------------
(IV) A bit more deep diving into DTO's and ModelWrapper:-
------------------------------------------------------------
=> Why use DTOs and Wrappers in Spring Boot?
1. Decoupling: DTOs decouple the internal entity classes from the API layer. If the database structure 
changes, the DTO can remain unchanged.
    (Q) What exactly is this Decoupling?
        - In a Spring Boot application, there are different layers (e.g., Entity layer, Service layer, 
          API/Controller layer), and each layer has its role. By using DTOs, we keep the API layer separate 
          from the database structure, so changes in one layer don’t break the other.
        - Scenario Without DTO:
            (i) Suppose we have a User entity representing a database table:
                @Entity
                public class User {
                    private Long id;
                    private String name;
                    private String email;
                    private String phoneNumber;
                    private String password; // Sensitive field
                    private LocalDateTime createdAt; // Metadata
                    // Getters and setters
                }
            (ii) If we directly return this User entity from our API, like:
                @GetMapping("/user/{id}")
                public User getUser(@PathVariable Long id) {
                    return userService.getUserById(id);
                }

                Our API response will include all fields, including sensitive ones like password.
            (iii) Now, imagine we modify the User entity by adding a new field address:
                private String address;
            (iv) Since our API is tightly coupled with the User entity, this new field automatically 
              gets exposed in our API response! This is a problem because our API client may not expect 
              or need this field. (How? -> Explained late)
        
        - Scenario with DTO:
            (i) Instead of directly returning the User entity, we create a UserDTO to control what data 
              is sent to the client:
                public class UserDTO {
                    private String name;
                    private String email;
                    // Only include the necessary fields
                }
            (ii) If the User entity changes (e.g., adding a field like address), it won’t affect our API 
              because the UserDTO remains the same!
            (iii) Even with the change in entity layer we only update the database logic in the Repository 
              or Service layer and the API layer remains stable.
    
    (Q) Since our API is tightly coupled with the User entity, this new field automatically gets exposed 
      in our API response! This is a problem because our API client may not expect or need this field. How 
      is this possible?
        - This happens because, in Java (and Spring Boot), if we return an entity object (e.g., User) directly 
          from a Controller as the API response, the framework (like Spring and Jackson) automatically 
          serializes the entire object into JSON. This serialization includes all the fields present in the 
          entity class unless you explicitly exclude them.
        - How Serialization Works?
            (i) When we return an entity from our Controller like this:
                @GetMapping("/user/{id}")
                public User getUser(@PathVariable Long id) {
                    return userService.getUserById(id);
                }

                Spring Boot will use Jackson (a library for converting Java objects to JSON) to serialize 
                the User object.
            
            (ii) Jackson automatically converts all fields in the User class (e.g., id, name, email, 
              password, createdAt) into key-value pairs in the JSON response, like this:
              {
                "id": 1,
                "name": "John Doe",
                "email": "john.doe@example.com",
                "password": "123456",
                "createdAt": "2024-01-01T10:00:00"
              }
            
            (iii) When a new field (e.g., address) is added to the User entity, it becomes part of the 
              User object, and Jackson will automatically include it in the JSON response:
              {
                "id": 1,
                "name": "John Doe",
                "email": "john.doe@example.com",
                "password": "123456",
                "createdAt": "2024-01-01T10:00:00",
                "address": "123 Main St"
              }
            
            (iv) This is what makes the API tightly coupled to the entity. Any change to the entity structure 
              (e.g., adding or removing fields) directly impacts the API response.
        
        - But, why this is a problem?
            (i) Client Breakage: If the API client (e.g., a frontend app or external system) is not 
              designed to handle the new field (e.g., address), it could break or behave unpredictably.
            (ii) Unintended Exposure: Sensitive or internal fields (like password or createdAt) might get 
              exposed unintentionally, posing a security risk.
            (iii) Lack of Control: We don’t have fine-grained control over what data gets sent to the client.


2. Efficiency: We can send only the necessary data to the client, reducing payload size.
3. Readability: Wrappers make our API responses more descriptive and standardized.
4. Validation: DTOs can be used for validating incoming requests without impacting the actual database 
entities.