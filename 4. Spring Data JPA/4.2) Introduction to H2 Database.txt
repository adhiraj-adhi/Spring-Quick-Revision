(4.2) Introduction to H2 Database:
===================================

=> Briefing:
--------------
(i) H2 Database is a lightweight, open-source relational database management system written in Java.
(ii) It is widely used for testing, development, and embedded database applications. 
(iii) H2 can operate in both in-memory and file-based modes, making it an excellent choice for 
scenarios where a lightweight and easy-to-configure database is required.

=> (Q) What is Embedded Database Applications?
(i) An embedded database is a database that is tightly integrated into an application.
(ii) It runs within the same process as the application rather than as a separate database server.
(iii) This makes it ideal for lightweight and standalone applications where we don’t want to set up 
or manage a separate database server.
(iv) For example, an application like a desktop tool or mobile app might use an embedded database 
like H2 to store its data locally.
(v) H2 can also run in a server mode, where it acts like a traditional database server (similar to MySQL 
which by defaul listens to port 3306). In this case, it can listen on a network port (e.g., 8082 by 
default) for external connections.

=> (Q) WHat is In-Memory Mode?
(i) The entire database is stored in the RAM (Random Access Memory) of our computer.
(ii) This is very fast but temporary—the data is lost when the application stops or the system shuts down.
(iii) Useful for testing or temporary operations where speed is critical, but data persistence isn’t needed.

=> (Q) What is File-Based Mode?
(i) The database is stored in a file on the disk.
(ii) The data persists even if the application stops or the system reboots.
(iii) This mode is used when we need the database to save data permanently.

=> Key Features of H2 Database:
(i) Lightweight
(ii) In-Memory Mode: Allows the database to reside in RAM for fast read/write operations, often used for 
testing.
(iii) File-Based Mode: Stores the database on disk, useful for persistent data storage.
(iv) SQL Compatibility: Fully supports standard SQL, including most ANSI SQL-92 features.
(v) Browser-Based Console: Includes a web-based console for database management.
(vi) Embedded and Server Modes: Can run as an embedded database (within an application) or as a standalone 
server.
(vii) Open Source: Licensed under the Apache 2.0 license.

=> Use Cases of H2 Database:
(i) Testing Environments: Ideal for integration testing due to its in-memory mode.
(ii) Prototyping: Quick setup makes it suitable for prototypes and proofs of concept.
(iii) Embedded Applications: Frequently used in applications requiring an embedded database.
(iv) Development: Allows developers to work without setting up complex database systems.

=> Setup H2 database in Spring Boot:
(i) We can add the H2 dependency to the pom.xml file.
(ii) Configure H2 in application.properties:
spring.datasource.url=jdbc:h2:mem:testdb  -> Here, testdb is the name of the database
spring.datasource.driverClassName=org.h2.Driver  -> Optional
spring.datasource.username=sa   -> Default username is sa
spring.datasource.password=password
spring.h2.console.enabled=true -> Enable H2 database console, which is a web-based interface for 
                                interacting with the H2 database. It is generally made available at
                                localhostURLOfOurProject/h2-console URL (say localhost:8080/h2-console).
spring.jpa.hibernate.ddl-auto=update  -> Configures how Hibernate, the JPA implementation, manages the 
                                schema of our database during application startup i.e. it updates the 
                                database schema to match changes in the entity classes without deleting 
                                existing data, and it performs this update during the startup of the 
                                application."


=> Some of the values of ddl-auto:
(i) none: Hibernate does not modify the database schema at all.
(ii) validate: Checks that the database schema matches the entities but does not make any changes.
(iii) update: Updates the schema without dropping data (described above).
(iv) create: Drops the existing schema and creates a new one at startup (all data is lost).
(v) create-drop: Same as create, but also drops the schema when the application stops.


=> Disadvantages of H2 Database:
(i) Limited Scalability: Not suitable for large-scale, production-grade applications (i.e. not suitable for 
large applications and production environments).
(ii) Data Volatility: In-memory databases lose data when the application stops.
(iii) Basic Features: Lacks some advanced features of enterprise-grade databases.

