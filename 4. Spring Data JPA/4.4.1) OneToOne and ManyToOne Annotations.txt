(4.4.1) OneToOne and ManyToOne Annotations (Part I):
=====================================================

(I) OneToOne:
----------------------------------------------------------------------------------------------------------

(i) In a One-to-One relationship, each record in one table is linked to exactly one record in another 
table and vice versa.

(ii) Example: Say a user having one permanent address and one permanent address being associated with one 
user.

(iii) Example: Say a student having one laptop and one laptop associated with one student.

------------------------
(iv) Code example:
------------------------

=> Student bean class:
package com.example.relationship.beans;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Student {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int roll;
	private String name;
	private String  about;
	public int getRoll() {
		return roll;
	}
	public void setRoll(int roll) {
		this.roll = roll;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAbout() {
		return about;
	}
	public void setAbout(String about) {
		this.about = about;
	}
}

=> Laptop bean class:
package com.example.relationship.beans;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class Laptop {
	@Id
	private int id;
	private String modelNumber;
	private String brand;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getModelNumber() {
		return modelNumber;
	}
	public void setModelNumber(String modelNumber) {
		this.modelNumber = modelNumber;
	}
	public String getBrand() {
		return brand;
	}
	public void setBrand(String brand) {
		this.brand = brand;
	}
}

=> Now we want to have OneToOne mapping between Student and Laptop so we can do the following in Student 
class:
@OneToOne
private Laptop laptop;
	
public Laptop getLaptop() {
	return laptop;
}
public void setLaptop(Laptop laptop) {
	this.laptop = laptop;
}

=> By using @OneToOne annotation we are basically saying that the primary key of laptop table will be
stored in a separate column in student table and this separate column will also act as foreign key.

=> When we run the above program internally following things will happen (we can see SQL running in behind):
(i) Creating the laptop and student tables.
(ii) Adjusting the constraint on laptop_id in the student table to ensure that each student can only be 
associated with one laptop.
(iii) Creating a foreign key constraint to link student.laptop_id to laptop.id, establishing a relationship 
between the two tables.

=> PROBLEM 1:
(i) Here, in the database end i.e. in database we have two tables with the student table having 
student.laptop_id column acting as foreign key. It is fine with respect to database.

(ii) But the problem is when working in JPA, if we have student than only we can get laptop (using the
corresponding getter method) but vice-versa is not true as this is unideirectional mapping.

(iii) To tackle this problem we can use @OneToOne mapping in both Entity classes. We can do the following
in Laptop class also:
@OneToOne
private Student student;
	
public Student getStudent() {
	return student;
}
public void setStudent(Student student) {
	this.student = student;
}

=> Problem 2: If we are using @OneToOne in both Entity classes then we will have two foreign key columns
one in student table (storing the primary key of laptop table i.e. id) and the other in laptop table 
(storing the primary key of student table i.e. roll). But this is not required. As we are creating two 
foreign key columns in the database end.

=> For this we use mappedBy attribute. This mappedBy attribute simply means that the other side will handle
the mapping. For instance, here if we do use mappedBy attribute in the Student class as:
@OneToOne(mappedBy = "student") // Here, "student" is the name of field of Student type in Laptop class
private Laptop laptop;

Now, only student_roll column will be created in the laptop table and this will act as foreign key. Also,
we have acheived bidirectional mapping i.e. with one object we can get the other one.

=> In other words, when we use mappedBy attribute we explicitly tell JPA that the relationship is already
being managed by the other side.

----------------------------
(v) @JoinColumn annotation:
----------------------------
=> It is optional annotation.
=> We can use this to provide explicit name of our foreign key column in the laptop table. We can specify
our custom foreign key column name in the Laptop class using this annotation as:
@OneToOne
@JoinColumn(name="std_roll")
private Student student;

(vi) Now for inserting the data, we have to first create our repository:
package com.example.relationship.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import com.example.relationship.beans.Student;
public interface StudentRepository extends JpaRepository<Student, Integer> {}

---------------------------
(vii) Inserting the data:
---------------------------
=> Case (a): Creating and saving only Student object:
@RestController
public class MyController {
	@Autowired
	private StudentRepository stdRepository;
	
	@GetMapping("/hello")
	public String getHello() {
		Student std = new Student();
		std.setName("Adhiraj");
		std.setAbout("I am SDE");
		
		stdRepository.save(std);
		
		return "Hello";
	}
}

=> Case (b): Creating both Student and Laptop object:
@GetMapping("/hello")
public String getHello() {
	Student std = new Student();
	std.setName("Abhinav");
	std.setAbout("I am SDE2");
		
	Laptop laptop = new Laptop();
	laptop.setId(122);
	laptop.setModelNumber("14343");
	laptop.setBrand("HP");
		
	laptop.setStudent(std);
	std.setLaptop(laptop);
	
	stdRepository.save(std);
	
	return "Hello";
}

In this case we will get error because we're trying to persist a Student entity that has a reference to 
a Laptop entity that hasn't been saved yet (i.e. insert query has not been run internally for laptop). 
In Hibernate, we must ensure that all related entities are properly saved before attempting to persist 
the parent entity. Basically, we are reuired to save Laptop and for that we have two choice: One is to 
create repository for Laptop and the second is to use cascade attribute in Student class as:
@OneToOne(mappedBy = "student", cascade = CascadeType.ALL)
private Laptop laptop;

Note: We must set the Laptop using setter method before saving the student object.

-----------------------------------
(viii) Understanding CascadeType:
-----------------------------------
(a) CascadeType.PERSIST:
=> When we save the parent entity, Hibernate will also save any related entities that are marked with 
this cascade type.
=> Example: If we save a Student with a Laptop, the Laptop will also be saved if it hasn't been persisted 
yet.
@OneToOne(cascade = CascadeType.PERSIST)
private Laptop laptop;

(b) CascadeType.MERGE:
=> If we update the parent entity, this cascade type will propagate the update to the related entities.
=> Example: If we update a Student's details, this cascade will also update the Laptop details if it was 
changed.
@OneToOne(cascade = CascadeType.MERGE)
private Laptop laptop;

(c) CascadeType.REMOVE:
=> If we delete the parent entity, this cascade type will automatically delete the associated child 
entities.
=> Example: If we delete a Student, this cascade will also delete their Laptop.
@OneToOne(cascade = CascadeType.REMOVE)
private Laptop laptop;

(d) CascadeType.REFRESH:
=> If we refresh the parent entity (i.e., reload it from the database), this cascade will refresh the 
state of the related entities.
=> Example: If we reload a Student entity from the database, this cascade will also reload the associated 
Laptop.
@OneToOne(cascade = CascadeType.REFRESH)
private Laptop laptop;

(e) CascadeType.DETACH:
=> If we detach the parent entity (i.e., make it unmanaged), this cascade will detach all the related 
entities.
Example: If we detach a Student, their associated Laptop will also be detached.
@OneToOne(cascade = CascadeType.DETACH)
private Laptop laptop;

(f) CascadeType.ALL:
=> This is a shortcut that includes all of the above cascades (PERSIST, MERGE, REMOVE, REFRESH, and DETACH). 
It means that all operations on the parent entity will be propagated to the associated entities.
=> Example: If we choose ALL, all changes (saving, updating, deleting, refreshing, or detaching) will apply 
to the Laptop automatically.
@OneToOne(cascade = CascadeType.ALL)
private Laptop laptop;


----------------------------------------------
(ix) Retrieving the values from the database:
----------------------------------------------
@GetMapping("/retrieve")
public void retrieve() {
	Student std = stdRepository.findById(8).get(); // findById() return Optional
	System.out.println("Student name: "+std.getName());
		
	// We are able to get Laptop from Student. We can even do vice-versa
	Laptop laptop = std.getLaptop();
	System.out.println("Laptop Brand: "+laptop.getBrand());	
}